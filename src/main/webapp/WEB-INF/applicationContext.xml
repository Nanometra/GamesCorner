<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- Active la détection automatique des annotations Spring comme @Autowwired ou encore @Configuration -->
	<context:annotation-config />
	<!-- Déclaration du fichier de configuration -->
<!-- 	<context:property-placeholder location="classpath:/com/projet/properties/*.properties" /> -->
	
	<!-- Scan des classes pour trouver les composants -->
	<context:component-scan base-package="com.projet" />
	
	<!-- Déclare le bean permettant l'import du fichier de configuration pour la base de données -->
	<bean id="propertyPlaceHolder" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- Indique au bean de chercher dans les propriétés système avant de chercher dans les fichiers properties. -->
		<!-- 
			Peut prendre les valeurs suivantes : 
				- SYSTEM_PROPERTIES_MODE_FALLBACK (default)
      				Check system properties if not resolvable in the specified properties.
				- SYSTEM_PROPERTIES_MODE_NEVER 
     				Never check system properties.
				- SYSTEM_PROPERTIES_MODE_OVERRIDE 
      				Check system properties first, before trying the specified properties.
		 -->
<!-- 		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"></property> -->
		<property name="ignoreResourceNotFound" value="true"></property>
		<property name="locations">
			<list>
				<value>classpath*:com/projet/properties/*.properties</value>
			</list>
		</property>
	</bean> 
	
	<!-- Ce bean ne gère pas les pools de connexions, il est à utiliser uniquement dans un environnement de développement ou de test et non pas dans un 
		 environnement de production. 
	 -->

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${POSTGRESQL_DRIVER}" />
		<property name="url" value="${POSTGRESQL_URL}"></property>
		<property name="username" value="${POSTGRESQL_USER}"></property>
		<property name="password" value="${POSTGRESQL_PASSWORD}"></property>
	</bean>
		
	<!-- ****************************** JPA configuration ****************************** -->
	
	<!-- Entity Manager Factory -->
	<!-- localEntityManagerFactroryBean pour les entity manager crées et pris en 
		 charge par l'application (le code).
	 	 localContainerEntityManagerFactoryBean pour les entity manager crées et pris
	 	 en charge par le conteneur JEE. Peuvent être récupérés par les JNDI par exemple. 
	 -->
	 <!-- Ici, on utilise Tomcat donc on utilise LocalEntityManagerFactoryBean -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- Précise l'emplacement du fichier persistence.xml à charger -->
		<property name="persistenceXmlLocation" value="classpath:./META-INF/persistence.xml"></property>
		
		<!-- La propriété persistenceUnitName fait référence à la persistence unit 
			 renseignée dans le fichier META-INF/persistence.xml
		 -->
		 <property name="persistenceUnitName" value="games_corner_PU"></property>
		 
		 <!-- Précise le package contenant les model du projet -->
		 <property name="packagesToScan" value="org.projet.entities"></property>
		 
		 <!-- Fait référence au datasource défini précédemment -->
		 <property name="dataSource" ref="dataSource"></property>
		 
		 <!-- Adaptateur JPA vers Hibernate qui permet de déterminer des propriétés spécifiques -->
		 <property name="jpaVendorAdapter">
		 	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		 		<property name="databasePlatform" value="${HIBERNATE.DIALECT}" />
		 		<property name="showSql" value="${HIBERNATE.SHOW_SQL}" />
		 		<property name="generateDdl" value="${HIBERNATE.GENERATED_DDL}"></property>
		 	</bean>
		 </property>
		 
		 <property name="jpaProperties">
		 <!-- Propriétés supplémentaires pour Hibernate par exemple -->	
		 	<props>
		 		<prop key="hbm2ddl.auto">${HIBERNATE.HBM2DDL.AUTO}</prop>
		 	</props>
		 </property>
	</bean>
		
	<!-- Détection des annotations @Transactionnal dans la couche Service -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- Transaction Manager -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
</beans>
